;; +*- bytes dynamic-lisp guile languages lisp -*-

;; name project: guile-moeny
;; name program: money
;; func program: setting-constant

;; gnu hack: GNU Guile Setting Constant (Setting Constant Reference Manual
;; buffer: full stream
;; stream: roku films
;; lisp: languages

;; changes: needs
;; topic: rules takes
;; goods: views bread

;; start file
;; stream roku films

(cons 'foo())           ; Emphasize the empty list; 
(setq foo-flag nil)     ; Emphasize the truth value false
;; packages foo nil
(booleanp 'foo)

;; 1.3.3 Evaluation Notation

;; A Lisp expression that you can evaluate is called a form. Ev;;; aluating a form always produces a result, which is a Lisp obj;; ect. In the examples in this manual, this is indicated with ‘;; ⇒’:

"?\C-d"
(car '(1 2 3 4))

;; 1.3.4 Printing Notation

;; Many of the examples in this manual print text when they are ;; evaluated. If you execute example code in a Lisp Interaction ;; buffer (such as the buffer *scratch*) by typing C-j after the;;  closing parenthesis of the example, the printed text is inse;; rted into the buffer. If you execute the example by other mea;; ns (such as by evaluating the function eval-region), the prin;; ted text is displayed in the echo area.

;; Examples in this manual indicate printed text with ‘-|’, irre;; spective of where that text goes. The value returned by evalu;; ating the form follows on a separate line with ‘⇒’.

(progn (prin1 'foo) (princ "\n") (prin1 'bar))
;;    -| foo
;;     -| bar
;;     ⇒ bar

;; 1.3.6 Buffer Text Notation

;; Some examples describe modifications to the contents of a buf;; fer, by showing the before and after versions of the text. Th;; ese examples show the contents of the buffer in question betw;; een two lines of dashes containing the buffer name. In additi;; on, ‘∗’ indicates the location of point. (The symbol for poin;; t, of course, is not part of the text in the buffer; it indic;; ates the place between two characters where point is currentl;; y located.)

;; ---------- Buffer: foo ----------
;; This is the ∗contents of foo.
;; ---------- Buffer: foo ----------

(insert "changed ")

;;     ⇒ nil
;; ---------- Buffer: foo ----------
;; This is the changed ∗contents of foo.
;; ---------- Buffer: foo ----------

(defvar format-descriptions
  1312
  "1.3.7 Format of Descriptions

Functions, variables, macros, commands, user options, and special forms are described in this manual in a uniform format. The first line of a description contains the name of the item followed by its arguments, if any. The category—function, variable, or whatever—appears at the beginning of the line. The description follows on succeeding lines, sometimes with examples.

    A Sample Function Description
    A Sample Variable Description")


;; Function: foo integer1 &optional integer2 &rest integers ¶

;; The function foo subtracts integer1 from integer2, then adds ;; all the rest of the arguments to the result. If integer2 is n;; ot supplied, then the number 19 is used by default.

`(foo 1 2 3 4 5)
`(foo 4)
;; More generally,
`(foo w x y ...)
`(+ (- x w) y ...)

;; 1.3.7.2 A Sample Variable Description

;; A variable is a name that can be bound (or set) to an object.;;  The object to which a variable is bound is called a value; w;; e say also that variable holds that value. Although nearly al;; l variables can be set by the user, certain variables exist s;; pecifically so that users can change them; these are called u;; ser options. Ordinary variables and user options are describe;; d using a format like that for functions, except that there a;; re no arguments.

;; Here is a description of the imaginary electric-future-map va;; riable.

;; Variable: electric-future-map ¶

;;     The value of this variable is a full keymap used by Elect;; ric Command Future mode. The functions in this map allow you ;; to edit commands you have not yet thought about executing. 

;; User option descriptions have the same format, but ‘Variable’;;  is replaced by ‘User Option’.


"`User Option`"

